trigger:
  - master

jobs:

  # Configure, build, install, and test job
  - job: 'build'
    pool:
      vmImage: 'vs2015-win2012r2'
    timeoutInMinutes: 360
    steps:

      # Install Chocolatey (https://chocolatey.org/install#install-with-powershellexe)
      - powershell: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          Write-Host "##vso[task.setvariable variable=PATH]$env:PATH"
          choco --version
        displayName: "Install Chocolatey"

      # Install Miniconda
      - script: |
          echo 'PATH before %PATH%'
          echo 'PYTHONPATH before %PYTHONPATH%'
          set PATH=%PATH:C:\Python27;=%
          choco install miniconda3 --yes
          echo 'PATH after %PATH%'
          echo 'PYTHONPATH after %PYTHONPATH%'
          set PATH=C:\tools\miniconda3\Scripts;C:\tools\miniconda3;C:\tools\miniconda3\Library\bin;%PATH%
          echo '##vso[task.setvariable variable=PATH]%PATH%'
          echo 'LIB before %LIB%'
          set LIB=C:\tools\miniconda3\Library\lib;%LIB%
          echo 'LIB after %LIB%'
          echo '##vso[task.setvariable variable=LIB]%LIB%'
          conda --version
        displayName: "Install Miniconda"

      # Configure Miniconda
      - script: |
          conda config --set always_yes yes
          conda config --append channels conda-forge
          conda info
          echo 'PATH again %PATH%'
          echo 'PYTHONPATH again %PYTHONPATH%'
          echo 'LIB again %LIB%'
        displayName: "Configure Miniconda"

      # Create conda enviroment
      # Note: conda activate doesn't work here, because it creates a new shell!
      - script: |
          conda install cmake ^
                        gtest ^
                        ninja ^
                        pybind11 ^
                        pytest ^
                        numpy ^
                        xtensor ^
                        python=3.6
          conda list
        displayName: "Install conda packages"

      # Install LLVM
      # Note: LLVM distributed by conda is too old
      - script: |
          choco install llvm --yes
          set PATH=C:\Program Files\LLVM\bin;%PATH%
          echo '##vso[task.setvariable variable=PATH]%PATH%'
          clang-cl --version
        displayName: "Install LLVM"

      # Configure
      - script: |
          setlocal EnableDelayedExpansion
          call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86_amd64
          mkdir build & cd build
          cmake -G Ninja ^
                -DCMAKE_BUILD_TYPE=Release ^
                -DCMAKE_C_COMPILER=clang-cl ^
                -DCMAKE_CXX_COMPILER=clang-cl ^
                -DBUILD_TESTS=ON ^
                -DCMAKE_INSTALL_PREFIX=C:\tools\miniconda3 ^
                $(Build.SourcesDirectory)
        displayName: "Configure xtensor-python"
        workingDirectory: $(Build.BinariesDirectory)

      # Build
      - script: |
          call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86_amd64
          cmake --build . ^
                --config Release ^
                --target test_xtensor_python ^
                -- -v
        displayName: "Build xtensor-python"
        workingDirectory: $(Build.BinariesDirectory)/build

      # Install
      - script: |
          call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86_amd64
          cmake --build . ^
                --config Release ^
                --target install ^
                -- -v
        displayName: "Install xtensor-python"
        workingDirectory: $(Build.BinariesDirectory)/build

      # Test (Google test)
      - script: |
          echo 'PATH and again %PATH%'
          echo 'PYTHONPATH and again %PYTHONPATH%'
          echo 'LIB and again %LIB%'
          .\test_xtensor_python
        displayName: "Test xtensor-python (Google test)"
        workingDirectory: $(Build.BinariesDirectory)/build/test

      # Test (pytest)
      - script: |
          py.test -s
        displayName: "Test xtensor-python (pytest)"
        workingDirectory: $(Build.BinariesDirectory)
